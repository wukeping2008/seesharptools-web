@page 
@using Sdcb.CSharpRunner.Host
@inject RoundRobinPool<Worker> db
@model Sdcb.CSharpRunner.Host.Pages.IndexModel
@{
}

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>C# Runner Playground</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .playground-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .main-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        }
        .monaco-editor-container {
            border-radius: 10px;
            overflow: hidden;
            border: 1px solid #e2e8f0;
            box-shadow: 0 0 0 3px transparent;
            transition: box-shadow 0.3s ease;
        }
        .monaco-editor-container:focus-within {
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3);
        }
        .fallback-editor {
            font-family: 'Consolas', 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            border-radius: 10px;
            border: 1px solid #e2e8f0;
            background: #1e1e1e;
            color: #d4d4d4;
            resize: vertical;
            letter-spacing: 0px;
        }
        .fallback-editor:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3);
        }
        .output-container {
            background: #1a202c;
            border-radius: 10px;
            color: #e2e8f0;
            font-family: 'Consolas', 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 13px;
            line-height: 1.4;
            max-height: 400px;
            overflow-y: auto;
            letter-spacing: 0px;
        }
        .run-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            border: none;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            padding: 12px 30px;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        .run-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
            color: white;
        }
        .run-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        .status-badge {
            border-radius: 20px;
            padding: 5px 15px;
            font-size: 12px;
            font-weight: 600;
        }
        .status-ready {
            background: #48bb78;
            color: white;
        }
        .status-running {
            background: #ed8936;
            color: white;
            animation: pulse 2s infinite;
        }
        .output-line {
            padding: 4px 8px;
            margin: 2px 0;
            border-radius: 4px;
        }
        .output-stdout {
            border-left: 3px solid #48bb78;
            background: rgba(72, 187, 120, 0.1);
        }
        .output-stderr {
            border-left: 3px solid #f56565;
            background: rgba(245, 101, 101, 0.1);
        }
        .output-result {
            border-left: 3px solid #4299e1;
            background: rgba(66, 153, 225, 0.1);
        }
        .output-error {
            border-left: 3px solid #f56565;
            background: rgba(245, 101, 101, 0.15);
            color: #fed7d7;
        }
        .output-compiler-error {
            border-left: 3px solid #ed8936;
            background: rgba(237, 137, 54, 0.15);
            color: #fbd38d;
        }
        .worker-info {
            background: #667eea;
            color: white;
            border-radius: 20px;
            padding: 5px 15px;
            font-size: 12px;
            font-weight: 600;
        }
        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: inline-block;
        }
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="playground-container">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10">
                <div class="main-card p-4">
                    <!-- Header -->
                    <div class="text-center mb-4">
                        <h1 class="display-5 fw-bold text-primary mb-3">
                            🚀 C# Runner Playground
                        </h1>
                        <div class="d-flex justify-content-center align-items-center gap-3 flex-wrap">
                            <span class="status-badge status-ready">
                                ✅ READY
                            </span>
                            <div class="worker-info">
                                <strong>Workers:</strong> <span id="workerCount">@db.Count</span>
                            </div>
                        </div>
                    </div>

                    <!-- Code Editor Section -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <label for="monaco-editor" class="form-label fw-bold mb-2">
                                💻 Write your C# code
                            </label>
                            <!-- Monaco Editor Container -->
                            <div id="monaco-editor" class="monaco-editor-container" style="height: 400px;"></div>
                            <!-- Fallback textarea (only shown if Monaco fails to load) -->
                            <textarea id="fallback-editor" class="form-control fallback-editor" rows="12" 
                                      style="display: none; height: 400px;" 
                                      placeholder="Enter your C# code here..."></textarea>
                        </div>
                    </div>

                    <!-- Controls -->
                    <div class="row mb-4">
                        <div class="col-12 d-flex justify-content-between align-items-center flex-wrap gap-3">
                            <div>
                                <label for="timeoutInput" class="form-label me-2">Timeout (ms):</label>
                                <input type="number" id="timeoutInput" class="form-control form-control-sm d-inline-block" style="width: 120px;" value="30000" min="1000" max="60000">
                            </div>
                            <div>
                                <button id="runBtn" class="run-btn">
                                    <span id="runBtnText">▶️ Run Code</span>
                                    <span id="runBtnSpinner" class="loading-spinner d-none"></span>
                                </button>
                                <button id="clearBtn" class="btn btn-outline-secondary ms-2">
                                    🗑️ Clear Output
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Output Section -->
                    <div class="row">
                        <div class="col-12">
                            <label class="form-label fw-bold mb-2">
                                📤 Output
                            </label>
                            <div id="output" class="output-container p-3">
                                <div class="text-muted">Click "Run Code" to start executing...</div>
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    <div class="text-center mt-4 pt-3 border-top">
                        <small class="text-muted">
                            For more information, please visit 
                            <a href="https://github.com/sdcb/csharp-runner" target="_blank" class="text-decoration-none">
                                🔗 https://github.com/sdcb/csharp-runner
                            </a>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Monaco Editor -->
    <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs/loader.js"></script>
    <script>
        const fallbackEditor = document.getElementById('fallback-editor');
        const timeoutInput = document.getElementById('timeoutInput');
        const runBtn = document.getElementById('runBtn');
        const runBtnText = document.getElementById('runBtnText');
        const runBtnSpinner = document.getElementById('runBtnSpinner');
        const clearBtn = document.getElementById('clearBtn');
        const output = document.getElementById('output');

        let isRunning = false;
        let monacoEditor = null;

        // Default code
        const defaultCode = `Console.WriteLine("Hello, C# Runner!");
Console.WriteLine($"Current time: {DateTime.Now}");

// Calculation example
int result = 3 + 4;
Console.WriteLine($"3 + 4 = {result}");

// Return result
result`;

        // Initialize Monaco Editor
        require.config({ paths: { vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            try {
                monacoEditor = monaco.editor.create(document.getElementById('monaco-editor'), {
                    value: defaultCode,
                    language: 'csharp',
                    theme: 'vs-dark',
                    fontSize: 14,
                    lineHeight: 1.5,
                    fontFamily: 'Consolas, Monaco, Menlo, "Ubuntu Mono", monospace',
                    fontLigatures: false,
                    letterSpacing: 0,
                    automaticLayout: true,
                    minimap: { enabled: false },
                    scrollBeyondLastLine: false,
                    wordWrap: 'on',
                    lineNumbers: 'on',
                    folding: true,
                    selectOnLineNumbers: true,
                    matchBrackets: 'always',
                    autoIndent: 'full',
                    formatOnPaste: true,
                    formatOnType: true,
                    suggestOnTriggerCharacters: true,
                    acceptSuggestionOnEnter: 'on',
                    tabCompletion: 'on',
                    quickSuggestions: {
                        other: true,
                        comments: false,
                        strings: false
                    }
                });

                // Add Ctrl+Enter keybinding for running code
                monacoEditor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, function() {
                    runBtn.click();
                });

                console.log('Monaco Editor initialized successfully');
            } catch (error) {
                console.error('Error initializing Monaco Editor:', error);
                // Fallback: show the textarea if Monaco fails to load
                fallbackEditor.value = defaultCode;
                fallbackEditor.style.display = 'block';
                document.getElementById('monaco-editor').style.display = 'none';
            }
        });

        // Run code
        runBtn.addEventListener('click', async () => {
            if (isRunning) return;

            const code = monacoEditor ? monacoEditor.getValue().trim() : fallbackEditor.value.trim();
            if (!code) {
                alert('Please enter code to execute');
                return;
            }

            setRunningState(true);
            clearOutput();
            
            try {
                const requestBody = {
                    code: code,
                    timeout: parseInt(timeoutInput.value) || 30000
                };

                const response = await fetch('/api/run', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const reader = response.body.getReader();
                const decoder = new TextDecoder();

                while (true) {
                    const { value, done } = await reader.read();
                    
                    if (done) break;

                    const chunk = decoder.decode(value);
                    const lines = chunk.split('\n');
                    
                    for (const line of lines) {
                        if (line.startsWith('data: ')) {
                            try {
                                const jsonData = line.substring(6);
                                if (jsonData.trim()) {
                                    const data = JSON.parse(jsonData);
                                    appendOutput(data);
                                }
                            } catch (e) {
                                console.error('JSON parse error:', e);
                            }
                        }
                    }
                }
            } catch (error) {
                appendOutput({
                    type: 'Error',
                    error: `Request error: ${error.message}`
                });
            } finally {
                setRunningState(false);
            }
        });

        // Clear output
        clearBtn.addEventListener('click', () => {
            clearOutput();
        });

        // Set running state
        function setRunningState(running) {
            isRunning = running;
            runBtn.disabled = running;
            
            if (running) {
                runBtnText.textContent = '🔄 Running...';
                runBtnSpinner.classList.remove('d-none');
            } else {
                runBtnText.textContent = '▶️ Run Code';
                runBtnSpinner.classList.add('d-none');
            }
        }

        // Clear output
        function clearOutput() {
            output.innerHTML = '<div class="text-muted">Ready to execute...</div>';
        }

        // Append output
        function appendOutput(data) {
            // Clear default message on first output
            if (output.children.length === 1 && output.children[0].classList.contains('text-muted')) {
                output.innerHTML = '';
            }

            const div = document.createElement('div');
            div.className = 'output-line';

            switch (data.kind) {
                case 'stdout':
                    div.className += ' output-stdout';
                    div.innerHTML = `<strong>[Output]</strong> ${escapeHtml(data.stdOutput)}`;
                    break;
                
                case 'stderr':
                    div.className += ' output-stderr';
                    div.innerHTML = `<strong>[Error]</strong> ${escapeHtml(data.stdError)}`;
                    break;
                
                case 'result':
                    div.className += ' output-result';
                    div.innerHTML = `<strong>[Result]</strong> ${escapeHtml(JSON.stringify(data.result))}`;
                    break;
                
                case 'error':
                    div.className += ' output-error';
                    div.innerHTML = `<strong>[Runtime Error]</strong><br><pre>${escapeHtml(data.error)}</pre>`;
                    break;
                
                case 'compilerError':
                    div.className += ' output-compiler-error';
                    div.innerHTML = `<strong>[Compiler Error]</strong><br><pre>${escapeHtml(data.compilationError)}</pre>`;
                    div.scrollTop = div.scrollHeight;
                    break;
                
                case 'end':
                    div.className += ' output-result';
                    const elapsed = data.elapsed || 0;
                    div.innerHTML = `<strong>[Execution Finished]</strong> Time elapsed: ${elapsed}ms`;
                    
                    // Show final stdout/stderr summary
                    if (data.stdOutput) {
                        const stdOutDiv = document.createElement('div');
                        stdOutDiv.className = 'output-line output-stdout mt-2';
                        stdOutDiv.innerHTML = `<strong>[Full Output]</strong><br><pre>${escapeHtml(data.stdOutput)}</pre>`;
                        output.appendChild(stdOutDiv);
                    }
                    
                    if (data.stdError) {
                        const stdErrDiv = document.createElement('div');
                        stdErrDiv.className = 'output-line output-stderr mt-2';
                        stdErrDiv.innerHTML = `<strong>[Full Error]</strong><br><pre>${escapeHtml(data.stdError)}</pre>`;
                        output.appendChild(stdErrDiv);
                    }
                    break;
                
                default:
                    div.innerHTML = `<strong>[Unknown Type]</strong> ${escapeHtml(JSON.stringify(data))}`;
            }

            output.appendChild(div);
            output.scrollTop = output.scrollHeight;
        }

        // HTML escape
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Worker count polling
        async function updateWorkerCount() {
            try {
                const resp = await fetch('/api/worker/count');
                if (resp.ok) {
                    const data = await resp.json();
                    document.getElementById('workerCount').textContent = data;
                } else {
                    document.getElementById('workerCount').textContent = '-';
                }
            } catch {
                document.getElementById('workerCount').textContent = '-';
            }
        }
        setInterval(updateWorkerCount, 1500);
    </script>
</body>
</html>